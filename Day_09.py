#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time : 2025/7/3 18:58
# @Author : wanqi.yu
# @File : Day_09.py
# @Software: PyCharm
'''
模块化开发规范
模块:在Python中，一个.py文件就是一个模块，模块是比类更高一级的封装，文件名就是模块的名字，模块里面包含了一些有特定功能的代码，
一般是给其他程序使用的
模块的分类:
内置模块:Python自带的模块，如time,random等
第三方模块:由其他程序开发者编写的程序，在本地安装后就可以使用
自定义模块:由我们自己编写的模块
模块具有三种形式
1.使用Python编写的.py文件
2.被编译为共享库或DLL的C或C++扩展
3.使用C语言编写并连接到Pyhon解释器的内置模块
模块的作用:
1.代码复用
2.代码组织
3.命名空间管理
4.扩展功能
5.提高代码可读性
模块导入
1.使用import导入
语法 import 模块名称
导入时应遵守，内置，第三方，自定义的顺序，并且要用空行隔开
一行可以导入多个，但尽量一行一个的导入
使用时以 模块名.函数的形式调用
使用as关键字可以给模块起别名
2.from import导入
用法与import基本相同，不同之处在于可以取出模块的一部分，或全部取出
语法 from 模块名 import 要导入的函数或方法
全部取出时使用*号 from 模块名 import *
下面是一部分代码示例
'''
#导入Python内置的苦
import random
#导入第三方库
import openpyxl
#导入自定义库
import Day_08

'''
模块编写规范
我们编写的代码，不仅是给自己用，也有可能会被其他人使用，因此，代码的可读性与可维护性十分重要，这就需要我们按照一定的规范去编写
下面是一个模块示例
'''

#!/usr/bin/python  # 指定解释器路径，通常只在unix环境有效

"""
模块的文档描述
"""

'''import sys  导入模块

x = 1  # 定义全局变量


class Foo:
    """类的文档说明"""
    pass


def bar():
    """函数的文档说明"""
    pass


if __name__ == '__main__':
    run_code = 0
#在模块编写时，除了这些示例，也可以加入一些作者信息，程序描述与使用说明在里面，这样可以优化使用率
'''

'''
模块导入时的注意点
1.同名方法，当导入多个不同的模块时，有些模块里的功能可能会重复，当调用这个功能时，优先会调用后面导入的模块的功能
解决的方法是 在调用功能时，加入模块名称 使用这种语法 模块名.方法名称
2.仅导入需要的模块，当导入的模块过多时，可能会影响性能
'''
'''
模块化设计原则
1.单一职责原则:每个模块只承担一个功能域的任务(如用户认证模块独立于日志模块)
2.接口隔离原则:通过__init__.py定义清晰的接口，隐藏实现细节
'''

if __name__ == "__main__":
    run_code = 0
