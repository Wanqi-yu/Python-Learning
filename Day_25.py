#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time : 2025/8/1 11:25
# @Author : wanqi.yu
# @File : Day_25.py
# @Software: PyCharm
'''
代码风格与PEP8
PEP8
PEP8是Python官方推荐的编码规范，全程是(Python Enhancement Propsal 8)
它的目标是让Python代码保持一致性，提高可读性，无论是个人项目还是团队协作，遵循PEP8都可以让代码看起来更专业，也方便其他人快速理解你的代码逻辑。
PEP8的主要核心点
1.缩进
PEP8明确要求使用4个空格作为缩进，而不是制表符(Tab).这样做的原因是，在不同的编辑器中，对Tab的显示可能不一致，而空格可以保证代码在任何环境中都可以
统一
2.命名规范
变量和函数:小写字母，下划线分隔，如 user_name
类名:驼峰式命名，如 MyClass
模块名:小写 + 下划线 如 my_module.py
3.行长限制
PEP8建议每行代码不超过79个字符。过长的代码会降低可读性，尤其是在小屏幕上查看时，对于长行，可以使用反斜杠(\)和括号换行
4.空白使用
空白的使用直接影响代码的清晰度，PEP8的规则包括
二元运算符:如 + - 两侧各加一个空格
逗号 冒号 后加一个空格
避免行尾多余空格
示例
a = 1 + 2
4.注释
注释是代码的说明书，PEP8建议
行内注释:与代码间隔两个空格
块注释:与代码对齐，放在代码上方
示例
# 这是一个块注释
# 用于解释函数功能
def my_function():
    x = 10  # 行内注释：初始化变量
    print(x)
如何编写可维护的代码
1.可维护性的定义
可维护性:指代码易于理解、修改和扩展的能力
2.编写可维护代码的原则

2.1 模块化
将代码拆分成小的，独立的模块或函数，每个函数只做一件事，这种方式提高了代码的复用性和可测试性
2.2 可读性
可读性高的代码就像一本好书，让人一看就懂。关键技巧包括：
使用有意义的变量名。
遵循 PEP 8 规范。
避免复杂嵌套逻辑。
2.3 文档化
为代码添加文档（如 docstring 和注释），能让他人快速上手你的项目。 备注:个人项目可以，公司工作时可以写成屎山，防止公司不给你留后路
2.4 测试
编写单元测试能验证代码的正确性，确保修改后功能不受影响。

'''


if __name__ == "__main__":
    run_code = 0
